<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interview Question Generator</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .question-card {
            margin-bottom: 15px;
            border-left: 4px solid #007bff;
            transition: background-color 0.3s ease;
        }

        .question-card.bg-light {
            border-left: 4px solid #28a745;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        .category-badge {
            font-size: 0.8rem;
        }

        .type-badge {
            font-size: 0.8rem;
        }

        .loading-container {
            display: none;
            text-align: center;
            padding: 40px 0;
        }

        .spinner-container {
            margin-bottom: 20px;
        }

        #reading-status {
            position: sticky;
            top: 10px;
            z-index: 100;
        }
    </style>
</head>

<body>
    <div class="container mt-4">
        <h1 class="mb-4">Interview Question Generator</h1>

        <div class="row mb-4">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Generate Questions</h5>
                        <form id="questionForm">
                            <div class="mb-3">
                                <label for="skillsets" class="form-label">Skillsets (comma separated)</label>
                                <input type="text" class="form-control" id="skillsets"
                                    placeholder="JavaScript, React, Node.js">
                            </div>
                            <div class="mb-3">
                                <label for="experience" class="form-label">Experience Level</label>
                                <select class="form-select" id="experience">
                                    <option value="junior">Junior (0-2 years)</option>
                                    <option value="mid-level">Mid-level (3-5 years)</option>
                                    <option value="senior" selected>Senior (6+ years)</option>
                                </select>
                            </div>
                            <button type="submit" class="btn btn-primary">Generate Questions</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>

        <!-- Loading Indicator -->
        <div id="loadingContainer" class="loading-container">
            <div class="spinner-container">
                <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <h4>Generating interview questions...</h4>
            <p class="text-muted">This may take a few moments</p>
        </div>

        <div id="results" class="d-none">
            <h2>Generated Questions <span id="questionCount" class="badge bg-primary"></span></h2>
            <div class="mb-3">
                <div class="btn-group" role="group">
                    <button type="button" class="btn btn-outline-primary" data-filter="all">All</button>
                    <button type="button" class="btn btn-outline-primary" data-filter="Technical">Technical</button>
                    <button type="button" class="btn btn-outline-primary"
                        data-filter="Scenario-Based">Scenario-Based</button>
                    <button type="button" class="btn btn-outline-primary" data-filter="Soft Skill">Soft Skills</button>
                </div>
            </div>
            <div id="questionsList"></div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            let isRecording = false;
            let mediaRecorder = null;
            let audioChunks = [];
            let currentQuestionId = null;
            let sessionId = Date.now().toString(); // Simple session ID
            let questionResults = [];
            let currentAudio = null;
            let currentStream = null;

            // Form submission handler
            document.getElementById('questionForm').addEventListener('submit', async (e) => {
                e.preventDefault();

                const skillsets = document.getElementById('skillsets').value.split(',').map(s => s.trim());
                const experience = document.getElementById('experience').value;

                // Hide results and show loading indicator
                document.getElementById('results').classList.add('d-none');
                document.getElementById('loadingContainer').style.display = 'block';

                try {
                    const response = await fetch('/api/questions', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ skilsets: skillsets, experience })
                    });

                    if (!response.ok) {
                        throw new Error('Failed to generate questions');
                    }

                    const data = await response.json();
                    displayQuestions(data);
                } catch (error) {
                    alert('Error: ' + error.message);
                } finally {
                    // Hide loading indicator regardless of success or failure
                    document.getElementById('loadingContainer').style.display = 'none';
                }
            });

            // Function to display questions
            function displayQuestions(data) {
                const questionsList = document.getElementById('questionsList');
                questionsList.innerHTML = '';

                const questions = data.questions.questions || [];
                document.getElementById('questionCount').textContent = questions.length;

                // Create an array to store all questions for sequential reading
                const questionsToRead = [];

                questions.forEach(q => {
                    const card = document.createElement('div');
                    card.className = 'card question-card mb-3';
                    card.dataset.type = q.type;
                    card.dataset.questionId = q.id;

                    card.innerHTML = `
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-start">
                                <h5 class="card-title">${q.question}</h5>
                                <div>
                                    <span class="badge bg-info category-badge">${q.category}</span>
                                    <span class="badge bg-secondary type-badge">${q.type}</span>
                                </div>
                            </div>
                        </div>
                    `;

                    questionsList.appendChild(card);

                    // Add question to the reading queue
                    questionsToRead.push(q.question);
                });

                document.getElementById('results').classList.remove('d-none');

                // Add a container for user answers and recording
                const answerContainer = document.createElement('div');
                answerContainer.id = 'answerContainer';
                answerContainer.className = 'mt-4 p-3 border rounded';
                answerContainer.innerHTML = `
                    <h4>Your Answer</h4>
                    <div id="currentQuestionIndicator" class="mb-2 text-primary"></div>
                    <div id="userAnswer" class="mb-3 p-2 bg-light rounded min-height-100"></div>
                    <button id="recordButton" class="btn btn-primary">Record Answer</button>
                    <div id="recordingStatus" class="mt-2 text-danger"></div>
                `;
                
                document.getElementById('results').appendChild(answerContainer);
                
                // Add event listener for the record button
                document.getElementById('recordButton').addEventListener('click', () => {
                    if (isRecording) {
                        stopRecording();
                    } else {
                        startRecording();
                    }
                });
                
                // Start reading questions sequentially
                if (questionsToRead.length > 0) {
                    readQuestionsSequentially(questionsToRead);
                }
            }

            // Filter questions by type
            document.querySelectorAll('[data-filter]').forEach(button => {
                button.addEventListener('click', () => {
                    const filter = button.dataset.filter;

                    document.querySelectorAll('[data-filter]').forEach(btn => {
                        btn.classList.remove('active');
                    });
                    button.classList.add('active');

                    document.querySelectorAll('.question-card').forEach(card => {
                        if (filter === 'all' || card.dataset.type === filter) {
                            card.style.display = 'block';
                        } else {
                            card.style.display = 'none';
                        }
                    });
                });
            });

            // Function to read questions one by one
            async function readQuestionsSequentially(questions) {
                // Add a status indicator to show which question is being read
                const statusDiv = document.createElement('div');
                statusDiv.id = 'reading-status';
                statusDiv.className = 'alert alert-info mt-3';
                statusDiv.innerHTML = 'Reading questions aloud...';
                document.getElementById('results').prepend(statusDiv);

                const questionCards = document.querySelectorAll('.question-card');

                for (let i = 0; i < questions.length; i++) {
                    // Update status to show which question is being read
                    statusDiv.innerHTML = `Reading question ${i + 1} of ${questions.length}...`;

                    // Highlight the current question being read
                    if (i > 0) questionCards[i - 1].classList.remove('bg-light');
                    questionCards[i].classList.add('bg-light');
                    
                    // Set current question ID
                    currentQuestionId = questionCards[i].dataset.questionId;

                    // Scroll to the question being read
                    questionCards[i].scrollIntoView({ behavior: 'smooth', block: 'center' });

                    try {
                        // Generate and play audio for this question
                        await generateAndPlayAudio(questions[i]);
                        
                        // Show recording UI for this question
                        showRecordingUI(currentQuestionId, i + 1);
                        
                        // Wait for user to record answer before moving to next question
                        await waitForUserAnswer();
                        
                        // Small pause between questions
                        await new Promise(resolve => setTimeout(resolve, 1000));
                    } catch (error) {
                        console.error('Error reading question:', error);
                        // Continue with next question even if one fails
                    }
                }

                // Remove highlight from last question
                const lastQuestion = document.querySelector('.question-card.bg-light');
                if (lastQuestion) lastQuestion.classList.remove('bg-light');

                // Update status when finished
                statusDiv.className = 'alert alert-success mt-3';
                statusDiv.innerHTML = 'Finished reading all questions.';
                
                // Show final results
                showResults();
            }

            // Function to generate and play audio for a single question
            async function generateAndPlayAudio(question) {
                try {
                    const response = await fetch('/api/questions/audio', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ text: question })
                    });

                    if (!response.ok) {
                        throw new Error('Failed to generate audio');
                    }

                    // Get the audio data as blob
                    const audioBlob = await response.blob();

                    // Create an audio element to play the sound
                    const audioUrl = URL.createObjectURL(audioBlob);
                    currentAudio = new Audio(audioUrl);

                    // Return a promise that resolves when audio finishes playing
                    return new Promise((resolve, reject) => {
                        currentAudio.onended = () => {
                            URL.revokeObjectURL(audioUrl);
                            currentAudio = null;
                            resolve();
                        };
                        currentAudio.onerror = reject;
                        currentAudio.play();
                    });
                } catch (error) {
                    console.error('Error generating audio:', error);
                    throw error;
                }
            }

            // Function to show recording UI for a question
            function showRecordingUI(questionId, questionNumber) {
                // Clear previous answer
                document.getElementById('userAnswer').textContent = '';
                document.getElementById('recordingStatus').textContent = '';
                
                // Update record button text
                document.getElementById('recordButton').textContent = 'Record Answer';
                
                // Show which question we're on
                document.getElementById('currentQuestionIndicator').textContent = 
                    `Recording answer for Question #${questionNumber}`;
            }

            // Function to show manual input UI
            function showManualInputUI() {
                const answerContainer = document.getElementById('answerContainer');
                
                // Create manual input form
                const manualInputForm = document.createElement('div');
                manualInputForm.id = 'manualInputForm';
                manualInputForm.className = 'mt-3';
                manualInputForm.innerHTML = `
                    <div class="card">
                        <div class="card-header bg-light">
                            <h5 class="mb-0">Type Your Answer</h5>
                            <small class="text-muted">Use this if voice recording isn't working</small>
                        </div>
                        <div class="card-body">
                            <textarea id="manualAnswerInput" class="form-control mb-3" rows="4" 
                                placeholder="Type your answer here..."></textarea>
                            <button id="submitManualAnswer" class="btn btn-primary">Submit Answer</button>
                        </div>
                    </div>
                `;
                
                answerContainer.appendChild(manualInputForm);
                
                // Add event listener for manual answer submission
                document.getElementById('submitManualAnswer').addEventListener('click', async () => {
                    const manualAnswer = document.getElementById('manualAnswerInput').value.trim();
                    
                    if (!manualAnswer) {
                        alert('Please enter your answer before submitting.');
                        return;
                    }
                    
                    try {
                        document.getElementById('userAnswer').innerHTML = '<div class="spinner-border spinner-border-sm text-primary me-2" role="status"></div> Processing your answer...';
                        
                        const response = await fetch(`/api/questions/speech/${currentQuestionId}`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ 
                                transcript: manualAnswer,
                                sessionId: sessionId
                            })
                        });
                        
                        if (!response.ok) {
                            const errorData = await response.json();
                            throw new Error(errorData.error || 'Failed to process answer');
                        }
                        
                        const data = await response.json();
                        questionResults.push({
                            questionId: currentQuestionId,
                            transcript: data.transcript,
                            evaluation: data.evaluation
                        });
                        
                        // Update UI to show the transcript
                        document.getElementById('userAnswer').textContent = data.transcript;
                        
                        // If we're waiting for an answer to continue, resolve the promise
                        if (window.waitingForAnswer) {
                            window.waitingForAnswer = false;
                            setTimeout(() => {
                                if (window.resolveAnswer) window.resolveAnswer();
                            }, 2000);
                        }
                        
                        // Clear the manual input
                        document.getElementById('manualAnswerInput').value = '';
                        
                    } catch (error) {
                        console.error('Error processing manual answer:', error);
                        document.getElementById('userAnswer').textContent = 'Error processing your answer. Please try again.';
                    }
                });
            }

            // Function to wait for user to record and submit answer
            function waitForUserAnswer() {
                return new Promise((resolve) => {
                    // Set a flag that will be checked in the stopRecording function
                    window.waitingForAnswer = true;
                    window.resolveAnswer = resolve;
                });
            }

            // Function to start recording
            function startRecording() {
                if (isRecording) {
                    stopRecording();
                    return;
                }
                
                // Don't allow recording while audio is playing
                if (currentAudio && !currentAudio.paused) {
                    alert('Please wait for the question to finish before recording your answer.');
                    return;
                }
                
                // Show manual input option if it doesn't exist yet
                if (!document.getElementById('manualInputForm')) {
                    showManualInputUI();
                }
                
                // Use lower quality audio settings
                const audioConstraints = {
                    audio: {
                        channelCount: 1,
                        sampleRate: 16000,
                        sampleSize: 16,
                        echoCancellation: true,
                        noiseSuppression: true
                    }
                };
                
                navigator.mediaDevices.getUserMedia(audioConstraints)
                    .then(stream => {
                        currentStream = stream;
                        mediaRecorder = new MediaRecorder(stream);
                        audioChunks = [];
                        
                        mediaRecorder.ondataavailable = (event) => {
                            audioChunks.push(event.data);
                        };
                        
                        mediaRecorder.onstop = async () => {
                            const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
                            
                            // Convert blob to base64
                            const reader = new FileReader();
                            reader.readAsDataURL(audioBlob);
                            reader.onloadend = async () => {
                                const base64Audio = reader.result.split(',')[1];
                                
                                try {
                                    // Show processing indicator
                                    document.getElementById('userAnswer').innerHTML = '<div class="spinner-border spinner-border-sm text-primary me-2" role="status"></div> Processing your answer...';
                                    document.getElementById('recordingStatus').textContent = '';
                                    
                                    const response = await fetch(`/api/questions/speech/${currentQuestionId}`, {
                                        method: 'POST',
                                        headers: {
                                            'Content-Type': 'application/json'
                                        },
                                        body: JSON.stringify({ 
                                            audio: base64Audio,
                                            sessionId: sessionId
                                        })
                                    });
                                    
                                    if (!response.ok) {
                                        const errorData = await response.json();
                                        throw new Error(errorData.error || 'Failed to process speech');
                                    }
                                    
                                    const data = await response.json();
                                    
                                    // Check if the transcript indicates a transcription error
                                    const hasTranscriptionError = 
                                        data.transcript.includes("I couldn't transcribe") || 
                                        data.transcript.includes("Audio transcription service is currently unavailable");
                                    
                                    if (hasTranscriptionError) {
                                        // Show error message and retry button
                                        document.getElementById('userAnswer').innerHTML = `
                                            <div class="alert alert-warning">
                                                <p>${data.transcript}</p>
                                                <button id="retryRecordButton" class="btn btn-sm btn-warning mt-2">Try Again</button>
                                                <button id="skipQuestionButton" class="btn btn-sm btn-outline-secondary mt-2 ms-2">Skip Question</button>
                                            </div>
                                        `;
                                        
                                        // Add event listeners for retry and skip buttons
                                        document.getElementById('retryRecordButton').addEventListener('click', () => {
                                            startRecording();
                                        });
                                        
                                        document.getElementById('skipQuestionButton').addEventListener('click', () => {
                                            // Store a placeholder result
                                            questionResults.push({
                                                questionId: currentQuestionId,
                                                transcript: "Question skipped by user",
                                                evaluation: {
                                                    isCorrect: false,
                                                    score: 0,
                                                    feedback: "Question was skipped"
                                                }
                                            });
                                            
                                            // Resolve the waiting promise to move to next question
                                            if (window.waitingForAnswer) {
                                                window.waitingForAnswer = false;
                                                if (window.resolveAnswer) window.resolveAnswer();
                                            }
                                        });
                                    } else {
                                        // Normal flow - store result and show transcript
                                        questionResults.push({
                                            questionId: currentQuestionId,
                                            transcript: data.transcript,
                                            evaluation: data.evaluation
                                        });
                                        
                                        // Update UI to show the transcript
                                        document.getElementById('userAnswer').textContent = data.transcript;
                                        
                                        // If we're waiting for an answer to continue, resolve the promise
                                        if (window.waitingForAnswer) {
                                            window.waitingForAnswer = false;
                                            setTimeout(() => {
                                                if (window.resolveAnswer) window.resolveAnswer();
                                            }, 2000); // Give user 2 seconds to see their answer before moving on
                                        }
                                    }
                                } catch (error) {
                                    console.error('Error processing speech:', error);
                                    document.getElementById('userAnswer').innerHTML = `
                                        <div class="alert alert-danger">
                                            <p>Error processing your answer: ${error.message}</p>
                                            <button id="retryRecordButton" class="btn btn-sm btn-danger mt-2">Try Again</button>
                                            <button id="skipQuestionButton" class="btn btn-sm btn-outline-secondary mt-2 ms-2">Skip Question</button>
                                        </div>
                                    `;
                                    
                                    // Add event listeners for retry and skip buttons
                                    document.getElementById('retryRecordButton').addEventListener('click', () => {
                                        startRecording();
                                    });
                                    
                                    document.getElementById('skipQuestionButton').addEventListener('click', () => {
                                        // Store a placeholder result
                                        questionResults.push({
                                            questionId: currentQuestionId,
                                            transcript: "Question skipped due to error",
                                            evaluation: {
                                                isCorrect: false,
                                                score: 0,
                                                feedback: "Question was skipped due to technical error"
                                            }
                                        });
                                        
                                        // Resolve the waiting promise to move to next question
                                        if (window.waitingForAnswer) {
                                            window.waitingForAnswer = false;
                                            if (window.resolveAnswer) window.resolveAnswer();
                                        }
                                    });
                                }
                            };
                        };
                        
                        mediaRecorder.start();
                        isRecording = true;
                        document.getElementById('recordButton').textContent = 'Stop Recording';
                        document.getElementById('recordingStatus').textContent = 'Recording... Speak now';
                    })
                    .catch(error => {
                        console.error('Error accessing microphone:', error);
                        alert('Error accessing your microphone. Please check permissions.');
                    });
            }

            // Function to stop recording
            function stopRecording() {
                if (!mediaRecorder || !isRecording) return;
                
                mediaRecorder.stop();
                isRecording = false;
                document.getElementById('recordButton').textContent = 'Record Answer';
                document.getElementById('recordingStatus').textContent = 'Processing...';
                
                // Stop all tracks on the stream
                if (currentStream) {
                    currentStream.getTracks().forEach(track => track.stop());
                    currentStream = null;
                }
            }

            // Function to show final results
            function showResults() {
                const resultsContainer = document.createElement('div');
                resultsContainer.className = 'mt-5 p-4 border rounded bg-light';
                resultsContainer.innerHTML = `
                    <h3>Interview Results</h3>
                    <div id="resultsContent"></div>
                `;
                
                document.getElementById('results').appendChild(resultsContainer);
                
                const resultsContent = document.getElementById('resultsContent');
                
                // Calculate overall score
                const totalScore = questionResults.reduce((sum, result) => sum + (result.evaluation?.score || 0), 0);
                const averageScore = questionResults.length > 0 ? totalScore / questionResults.length : 0;
                
                resultsContent.innerHTML = `
                    <div class="mb-4">
                        <h4>Overall Score: ${averageScore.toFixed(1)}%</h4>
                    </div>
                    <h5>Question Breakdown:</h5>
                `;
                
                // Add each question result
                questionResults.forEach((result, index) => {
                    const resultCard = document.createElement('div');
                    resultCard.className = `card mb-3 ${result.evaluation?.isCorrect ? 'border-success' : 'border-danger'}`;
                    resultCard.innerHTML = `
                        <div class="card-header d-flex justify-content-between">
                            <span>Question ${index + 1}</span>
                            <span class="badge ${result.evaluation?.isCorrect ? 'bg-success' : 'bg-danger'}">
                                ${result.evaluation?.isCorrect ? 'Correct' : 'Incorrect'} (${result.evaluation?.score || 0}%)
                            </span>
                        </div>
                        <div class="card-body">
                            <p><strong>Your Answer:</strong> ${result.transcript}</p>
                            <p><strong>Feedback:</strong> ${result.evaluation?.feedback || 'No feedback available'}</p>
                            ${result.evaluation?.correctPoints ? `
                            <div class="mt-2">
                                <p><strong>Correct Points:</strong></p>
                                <ul>
                                    ${result.evaluation.correctPoints.map(point => `<li>${point}</li>`).join('')}
                                </ul>
                                <p><strong>Missing Points:</strong></p>
                                <ul>
                                    ${result.evaluation.missingPoints.map(point => `<li>${point}</li>`).join('')}
                                </ul>
                            </div>
                            ` : ''}
                        </div>
                    `;
                    
                    resultsContent.appendChild(resultCard);
                });
            }
        });
    </script>
</body>

</html>






